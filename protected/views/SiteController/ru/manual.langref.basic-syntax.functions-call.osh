<p>
В OS все выражения являются либо управляющими конструкциями (<code>if</code>, <code>else</code>, <code>for</code> и др.),
либо вызовами функций. Под вызовом функции следует понимать синтаксическую конструкцию, позволяющую разработчику
запустить функцию на выполнение.

<p>
<div class="bs-callout bs-callout-info">
Функции в OS представляют собой самостоятельный фрагмент кода программы, 
предназначенный для выполнения некоторой задачи. Функции позволяют один и тот же фрагмент программы 
использовать многократно.
</div>
</p>

<p>
OS поддерживает несколько различных способов вызова функций.

<h3>Обычный вызов функции</h3>

<p>
Обычным способом является конструкция вида <code>max(a, b)</code>. В начале указывается функция,
затем в круглых скобках передаются параметры вызова через запятую.

<%@controller.widget{'SourceWidget', source="examples/tutorial.basic-syntax.functions-call.osh"}%>

<h3>Вызов функции с одним параметром - объектом</h3>

<p>
В процессе разработки программы иногда появляется неоходимость вызвать функцию с одним параметром,
который к тому же является контейнером пар ключ/значения (объектом).

<%@controller.widget{'SourceWidget', source="examples/tutorial.basic-syntax.functions-call.obj-in-brackets.osh"}%>

<p>
OS позволяет вместо стоящих подряд скобок <code>({</code> и <code>})</code> использовать только фигурные.

<%@controller.widget{'SourceWidget', source="examples/tutorial.basic-syntax.functions-call.obj.osh"}%>

<h3>Цепочный вызов</h3>

<p>
В OS цепочка вызовов нескольких функций будет выполняться слева направо.

<%@controller.widget{'SourceWidget', source="examples/tutorial.basic-syntax.functions-call.obj-chain.osh"}%>

<h3>Автоматический вызов функции с одним параметром</h3>

<p>
Как уже отмечалось ранее, в OS любые выражения - это либо управляющие конструкции, либо вызовы фукнций. 
Поэтому рядом стоящие два выражения интерпретируются OS как  функция и ее параметр. Это позволяет не использовать
скобки в конструкция вида.

<%@controller.widget{'SourceWidget', source="examples/tutorial.basic-syntax.functions-call.auto.osh"}%>

<p>
<div class="bs-callout bs-callout-danger">
Такой вызов возвожен только в том случае, если функция стоит обособлена, т.е. не является частью 
другого выражения или управляющей конструкции. Другими словами, автоматический вызов нельзя использовать
в выражениях из нескольких операторов и т.п.
</div>
</p>

<p>
<div class="bs-callout bs-callout-danger">
<p>
Автоматический вызов не будет работать, если параметром функции является массив, записаный
через квадратные скобки, т.к. такая конструкция обозначает доступ к свойству объекта.
В такой ситуации нужно использовать обычный вызов функции через круглые скобки.

<%@controller.widget{'SourceWidget', source="examples/tutorial.basic-syntax.functions-call.auto-array.osh"}%>
</div>
</p>

<h3>Вызов результата функции</h3>

<p>
OS позволяет создавать функцию внутри др. фукнции, возвращать её и, без сохранения во временную переменную, сразу же 
вызывать.

<%@controller.widget{'SourceWidget', source="examples/tutorial.basic-syntax.functions-call.ret-as-func.osh"}%>

<div class="alert alert-info">
См. 
<a href="<%=@controller.createUrl{params={page="langref.functions.closures"}}%>">Вложенные функции и замыкания</a>,
<a href="<%=@controller.createUrl{params={page="langref.control-structures"}}%>">Управляющие конструкции</a>,
<a href="<%=@controller.createUrl{params={page="langref.oop.properties"}}%>">Свойства объектов</a>,
<a href="<%=@controller.createUrl{params={page="langref.oop"}}%>">ООП</a>
</div>
