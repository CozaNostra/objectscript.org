<p>
Числа в OS являются числами с плавающей точкой. Размер числа зависит от платформы, хотя максимум, как правило 
составляет <code>~1.8e308</code> с точностью около 16 десятичных цифр (64-битный IEEE формат).
<p>
В OS числа можно записать в разных вариантах:

<div class="row">
  <div class="col-md-11">
<pre class="prettyprint linenums lang-js">
  a = 1234;   // десятичное число
  a = -123;   // отрицательное число
  a = 0123;   // восьмеричное число (эквивалентно 83 в десятичной системе)
  a = 0x1A;   // шестнадцатеричное число (эквивалентно 26 в десятичной системе)
  a = 0b101;  // двоичное число (эквивалентно 5 в десятичной системе)
  a = 1.5;    // число с плавающей точкой
  a = 1.5e2;  // экспоненциальная запись числа (эквивалентно 150.0)
  a = 150e-2; // еще экспоненциальная запись (эквивалентно 1.5)
</pre>
  </div>
</div>

<h3>Преобразование в целое</h3>

<p>
В OS числа автоматически преобразуются в целые (как и наоборот) при необходимости. Например, при использовании побитовых
операторов <code>|</code>, <code>&amp;</code>, <code>^</code> и <code>~</code>.
<p>
Для явного преобразования в целое, используйте фунцкции <code>math.floor</code>, <code>math.ceil</code>, <code>math.round</code>.
Кроме этого запись <code>foo|0</code> также преобразует значение переменной <i>foo</i> в целое значение. Для того, чтобы 
преобразовать число в 32-битное целое, используйте запись <code>foo & 0xffffffff</code>.

<h3>Погрешности в вычислениях</h3>

<p>
Числа хранятся в 64-битном IEEE формате (по умолчанию), который обеспечивает точность около 16 десятичных цифр. 
Т.к. это всегда числа с плавающей точкой, то они могут не совсем точно хранить ожидаемое значение с учетом цифр после запятой.
Ответ на вопрос, почему это работает именно так, можно найти в <a href="http://floating-point-gui.de/" 
taregt="_blank">руководстве по числам с плавающей точкой</a>, которое также называется <i>"Why don’t my numbers add up?"</i> 
("Почему мои числа не складываются?").

<h3>Пример с точностью чисел</h3>

<div class="row">
  <div class="col-md-11 badge-src">
	<%@controller.widget('BadgeSourceWidget', {view="examples/tutorial.numbers.osh"})%>

<pre class="prettyprint linenums lang-js"><% @controller.beginWidget("HtmlEncodeWidget") %>
<pre>&lt;%
  printf("%.20f\n", 0.94 - 0.01)  // outputs: 0.93000000000000005000
  printf("%f\n", 0.94 - 0.01)     // outputs: 0.930000

  // use human friendly number format
  printf("%n\n", 0.94 - 0.01)     // outputs: 0.93

  // numbers are converted to string using human friendly format
  echo(0.94 - 0.01, "\n")         // outputs: 0.93

  echo(typeOf(10.5), "\n")        // outputs: number
%&gt;</pre>
<% @controller.endWidget("HtmlEncodeWidget") %></pre>
  </div>
</div>

<h3>Сравнение чисел с плавающей точкой</h3>

<p>
С учетом потерь на точность вычислений, проверять числа с плавающей точкой на равенство проблематично из-за их внутреннего представления. 
Тем не менее, существуют способы для их сравнения, которые работают несмотря ни на что.
<p>
Для сравнения чисел с плавающей точкой используется верхняя граница относительной ошибки при округлении. Эта величина называется 
машинной эпсилон или единица округления (unit roundoff) и представляет собой самую маленькую допустимую разницу при расчетах.

<h3><code>a</code> и <code>b</code> равны до 5-ти знаков</h3>

<div class="row">
  <div class="col-md-11 badge-src">
	<%@controller.widget('BadgeSourceWidget', {view="examples/tutorial.numbers.compare.osh"})%>

<pre class="prettyprint linenums lang-js"><% @controller.beginWidget("HtmlEncodeWidget") %>
&lt;%
  a = 1.23456789;
  b = 1.23456780;
  epsilon = 0.00001;

  if(math.abs(a - b) < epsilon){
    echo "true";
  }else{
    echo "false";
  }
%&gt;
<% @controller.endWidget("HtmlEncodeWidget") %></pre>
  </div>
</div>

<h3>Преобразование в число</h3>

<p>
При выполнении арифметических операций, автоматически выполняются следующие преобразования:

<p>
<div class="row">
  <div class="col-md-11">
<table class="table table-striped">
  <thead>
	<tr>
	  <th>Значение</th>
	  <th>Результат</th>
	  <th>Комментарий</th>
	</tr>
  </thead>
  <tbody>
	<tr>
	  <td><code>null</code></td>
	  <td><code>0</code></td>
	  <td></td>
	</tr>
	<tr>
	  <td><code>true</code></td>
	  <td><code>1</code></td>
	  <td></td>
	</tr>
	<tr>
	  <td><code>false</code></td>
	  <td><code>0</code></td>
	  <td></td>
	</tr>
	<tr>
	  <td><code>12</code></td>
	  <td><code>12</code></td>
	  <td>это уже число</td>
	</tr>
  </tbody>
</table>
  </div>
</div>

<p>
По умолчанию в OS математические операторы не работают с др. типами данных. Это сделано для того, 
чтобы исключить невидимые для программиста преобразования типов и иметь больший контроль над 
значениями. Если попытаться сложить строку и число, произойдет исключение времени выполнения.

<div class="row">
  <div class="col-md-11 badge-src">
	<%@controller.widget('BadgeSourceWidget', {view="examples/tutorial.numbers.num-plus-str.osh"})%>
<pre class="prettyprint linenums lang-js"><% @controller.beginWidget("HtmlEncodeWidget") %>
<pre>&lt;%
  echo(12 + "2")
%&gt;</pre>
<% @controller.endWidget("HtmlEncodeWidget") %></pre>
  </div>
</div>

<p>
<div class="bs-callout bs-callout-danger">
OS предлагает программисту решить, что именно должно произойти в этом случае, например, строковая конкатенация
или математическое сложение или оставить как есть по умолчанию. Читайте об этом подробнее 
в разделе <a href="">Магические методы</a>.
</div>
</p>

<p>
В OS преобразование в число выполняется функцией <code>toNumber</code>, она преобразует выше описанные простые типы,
а также строки в число. Для переменных других типов, вызывается метод <code>valueOf</code>, который должен 
вернуть один из простых типов (который сам по себе легко преобразуется в число). Если преобразование в число 
невозможно, то <code>toNumber</code> возвращает <code>0</code>.

<p>
Др. важной концепцией в OS является проверка совместимости с числом функцией <code>numberOf</code>. Она также умеет преобразовывать
строку и былево значение в число, а для <code>null</code> и остальных не числовых типов возвращает <code>null</code>.

<h3>Пример <code>numberOf</code> в DateTime.__add</h3>
<div class="row">
  <div class="col-md-11">
<pre class="prettyprint linenums lang-js">
function DateTime.__add(b){
  return DateTime {
    comdate = @comdate + (numberOf(b) || throw "DateTime.__add requires Number")
  }
}
</pre>
  </div>
</div>

<p>
<div class="bs-callout bs-callout-danger">
<code>DateTime.__add</code> реализует метод прибавление к дате количества дней, которое должно быть числовым. 
Если к дате прибавить не число, например, значение объектного типа, то это не имеет логического смысла, поэтому 
вызывается исключение оператором <code>throw</code>.
</div>
</p>

<p>
<div class="bs-callout bs-callout-danger">
Обратите внимание, что в OS преобразование к булеву типу происходит следующим образом: 
<code>null</code> и <code>false</code> возвращают <i>ложь</i>, все другие значения возвращают <i>истину</i>, 
включая число <code>0</code> и пустую строку <code>""</code>. Именно поэтому выше приведенный код работает 
правильно, даже когда переменная <code>b</code> равна <code>0</code> (нулю).
</div>
</p>

<p>
<div class="bs-callout bs-callout-danger">
В OS операторы <code>&&</code> и <code>||</code> возвращают исходное значение, делая логическую проверку за кадром.
</div>
</p>

<%if(false){%>
<h3>Пример <code>numberOf</code> в HttpRequest</h3>
<div class="row">
  <div class="col-md-11 badge-src">
	<span class="badge"><a href="https://github.com/unitpoint/objectscript.org/blob/master/protected/components/HttpRequest.os#L39"
		target="_blank" title="Исходник"><span class="glyphicon glyphicon-paperclip"></span></a></span>
<pre class="prettyprint linenums lang-js">
__get@port = function(){
    return @_port || @_port = (!@isSecureConnection 
        && numberOf(_SERVER['SERVER_PORT'])) || 80
},
</pre>
  </div>
</div>
<%}/*if*/%>

<h3>Пример работы <code>numberOf</code> и <code>toNumber</code></h3>
<div class="row">
  <div class="col-md-11 badge-src">
	<%@controller.widget('BadgeSourceWidget', {view="examples/tutorial.number.convert.osh"})%>
	
<pre class="prettyprint linenums lang-js"><% @controller.beginWidget("HtmlEncodeWidget") %>
<pre>&lt;%
  printf("        %9s %9s\n", 'numberOf', 'toNumber')
  printf("---------------------------\n")
  printf("  null: %9s %9s\n", numberOf(null), toNumber(null))
  printf("  true: %9s %9s\n", numberOf(true), toNumber(true))
  printf(" false: %9s %9s\n", numberOf(false), toNumber(false))
  printf("  \"12\": %9s %9s\n", numberOf("12"), toNumber("12"))
  printf("\"0x12\": %9s %9s\n", numberOf("0x12"), toNumber("0x12"))
  printf("\"0123\": %9s %9s\n", numberOf("0123"), toNumber("0123"))
  printf("\"0b10\": %9s %9s\n", numberOf("0b10"), toNumber("0b10"))
  printf("\"12lo\": %9s %9s\n", numberOf("12lo"), toNumber("12lo"))
  printf("    12: %9s %9s\n", numberOf(12), toNumber(12))

  var obj = {
    valueOf = function(){
      return 10
    }
  }
  printf("   obj: %9s %9s\n", numberOf(obj), toNumber(obj))

  var arr = [1,2,3]
  printf(" array: %9s %9s\n", numberOf(arr), toNumber(arr))
%&gt;</pre>
<% @controller.endWidget("HtmlEncodeWidget") %></pre>
  </div>
</div>

<p>
<div class="row">
  <div class="col-md-11">
<table class="table table-striped">
  <thead>
	<tr>
	  <th></th>
	  <th>numberOf</th>
	  <th>toNumber</th>
	</tr>
  </thead>
  <tbody>
	<tr>
	  <td><code>null</code></td>
	  <td><code>null</code></td>
	  <td><code>0</code></td>
	</tr>
	<tr>
	  <td><code>true</code></td>
	  <td><code>1</code></td>
	  <td><code>1</code></td>
	</tr>
	<tr>
	  <td><code>false</code></td>
	  <td><code>0</code></td>
	  <td><code>0</code></td>
	</tr>
	<tr>
	  <td><span class="str">"12"</span></td>
	  <td><code>12</code></td>
	  <td><code>12</code></td>
	</tr>
	<tr>
	  <td><span class="str">"0x12"</span></td>
	  <td><code>18</code></td>
	  <td><code>18</code></td>
	</tr>
	<tr>
	  <td><span class="str">"0123"</span></td>
	  <td><code>83</code></td>
	  <td><code>83</code></td>
	</tr>
	<tr>
	  <td><span class="str">"0b10"</span></td>
	  <td><code>2</code></td>
	  <td><code>2</code></td>
	</tr>
	<tr>
	  <td><span class="str">"12lo"</span></td>
	  <td><code>null</code></td>
	  <td><code>0</code></td>
	</tr>
	<tr>
	  <td><code>obj</code></td>
	  <td><code>null</code></td>
	  <td><code>10</code></td>
	</tr>
	<tr>
	  <td><code>array</code></td>
	  <td><code>null</code></td>
	  <td><code>0</code></td>
	</tr>
  </tbody>
</table>
  </div>
</div>
