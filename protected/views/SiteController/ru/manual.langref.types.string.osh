<p>
Строка - это набор символов, где символ - это то же самое, что и байт. Это значит, что OS поддерживает ровно 256 различных символов, 
а также то, что в OS нет встроенной поддержки Unicode. Однако OS имеет полную поддержку кодировки UTF-8, 
читайте об этом более подробно в разделе <a href="<%=@controller.createUrl{params={page="intro.utf8support"}}%>">Поддержка UTF-8 в OS</a>.

<p>
<div class="bs-callout bs-callout-danger">
Строки могут быть размером более 2 Гб.
</div>
</p>

<p>
Строки в OS не изменяемы и всегда хранятся в памяти в одном экземпляре. Как это можно понимать? Это означает, что если в двух
переменных хранятся строковые значения с одной и той же последовательностью байт, то реально переменные будут ссылаться на одно и то же
значение. Это же касается строк, полученных на этапе выполнения. Такая компановка позволяет OS очень эффективно
использовать память под строковые значения.

<h3>Синтаксис</h3>

<p>
В OS строка может быть определена четырьмя различными способами:

<ul>
<li><p><a href="#single">одинарными кавычками</a>
<li><p><a href="#double">двойными кавычками</a>
<li><p><a href="#raw-heredoc">простым heredoc-синтаксисом</a>
<li><p><a href="#heredoc">heredoc-синтаксисом</a>
</ul>

<h3><a name="single"></a>Одинарные кавычки</h3>

<p>
Простейший способ определить строку - это заключить ее в одинарные кавычки (символ <code>'</code>).
<p>
Чтобы использовать одинарную кавычку внутри строки, проэкранируйте ее обратной косой чертой (<code>\</code>). 
Если необходимо написать саму обратную косую черту, продублируйте ее (<code>\\</code>). Все остальные случаи применения 
обратной косой черты будут интерпретированы как обычные символы: это означает, что если вы попытаетесь использовать другие 
управляющие последовательности, такие как <code>\n</code> и др., они будут выведены как есть вместо какого-либо особого поведения.

<h3>Пример с одинарными ковычками</h3>

<div class="row">
  <div class="col-md-10 badge-src">
	<%@controller.widget('BadgeSourceWidget', {view="examples/tutorial.string.single.osh"})%>
	
<pre class="prettyprint linenums lang-js"><% @controller.beginWidget("HtmlEncodeWidget") %>
&lt;%
  echo 'Это простая строка<br />';

  // Выводит: Однажды Арнольд сказал: "I'll be back"
  echo 'Однажды Арнольд сказал: "I\'ll be back"<br />';

  // Выводит: Вы удалили C:\*.*?
  echo 'Вы удалили C:\\*.*?<br />';

  // Выводит: Вы удалили C:\*.*?
  echo 'Вы удалили C:\*.*?<br />';

  // Выводит: Это не будет развернуто: \n новая строка
  echo 'Это не будет развернуто: \n новая строка<br />';

  // Выводит: Переменные expand также either не разворачиваются
  echo 'Переменные ${expand} также ${either} не разворачиваются<br />';
%&gt;
<% @controller.endWidget("HtmlEncodeWidget") %></pre>
  </div>
</div>

<p>
<div class="bs-callout bs-callout-danger">
Строки в одинарных ковычкам должны находится на одной строке. Если нужна многострочная строка, то воспользуйтесь 
<a href="#raw-heredoc">простым heredoc-синтаксисом</a>.
</div>
</p>

<h3><a name="double"></a>Двойные кавычки</h3>

<p>
Если строка заключена в двойные кавычки (<code>"</code>), то OS распознает большее количество управляющих последовательностей 
для специальных символов.

<table class="table table-striped table-bordered">
  <thead>
	<tr>
	  <th>Последовательность</th>
	  <th>Значение</th>
	</tr>
  </thead>
  <tbody>
	<tr>
	  <td>\n</td>
	  <td>новая строка (LF или 0x0A (10) в ASCII)</td>
	</tr>
	<tr>
	  <td>\r</td>
	  <td>возврат каретки (CR или 0x0D (13) в ASCII)</td>
	</tr>
	<tr>
	  <td>\t</td>
	  <td>горизонтальная табуляция (HT или 0x09 (9) в ASCII)</td>
	</tr>
	<tr>
	  <td>\b</td>
	  <td>возврат на одну позицию (0x08 (8) в ASCII)</td>
	</tr>
	<tr>
	  <td>\f</td>
	  <td>подача страницы (FF или 0x0C (12) в ASCII)</td>
	</tr>
	<tr>
	  <td>\v</td>
	  <td>вертикальная табуляция (VT или 0x0B (11) в ASCII)</td>
	</tr>
	<tr>
	  <td>\$</td>
	  <td>знак доллара ($)</td>
	</tr>
	<tr>
	  <td>\"</td>
	  <td>двойная кавычка (")</td>
	</tr>
	<tr>
	  <td>\\</td>
	  <td>обратный слеш (\)</td>
	</tr>
	<tr>
	  <td>\x[0-9A-Fa-f]{1,2}</td>
	  <td>последовательность символов, соответствующая регулярному выражению символа в шестнадцатеричной системе счисления</td>
	</tr>
	<tr>
	  <td>\0[0-7]{1,3}</td>
	  <td>последовательность символов, соответствующая регулярному выражению символа в восьмеричной системе счисления</td>
	</tr>
	<tr>
	  <td>\[1-9]\d{0,2}</td>
	  <td>последовательность символов, соответствующая регулярному выражению символа в десятичной системе счисления</td>
	</tr>
  </tbody>
</table>

<p>
Как и в строке, заключенной в одинарные кавычки, экранирование любого символа выведет также и саму обратную косую черту. 
<p>
Самым важным свойством строк в двойных кавычках является <a href="var-injection">обработка переменных внутри строк</a>.

<p>
<div class="bs-callout bs-callout-danger">
Строки в двойных ковычках должны находится на одной строке. Если нужна многострочная строка, то воспользуйтесь 
<a href="#heredoc">heredoc-синтаксисом</a>.
</div>
</p>

<h3><a name="raw-heredoc"></a>Простой heredoc-синтаксис</h3>

<p>
Простой heredoc-синтаксис похож на строку с одинарными кавычками, но позволяет вводить многострочные строки с 
пользовательским маркером окончания строки. 
<p>
Начинается такая строка с последовательности <code>&lt;&lt;&lt;MARKER'</code> (подробно это выглядит так: 
&lt;&lt;&lt; + MARKER + ' - это одинарная кавычка) и заканчивается <code>MARKER</code>, где <i>MARKER</i> - это 
пользовательская последовательность символов. Что это значит? Т.е. программист сам придумывает <i>MARKER</i>, 
в зависимости от того, какой удобнее использовать в данный момент.
<p>
Такой сиснтаксис идеально подходит для вставки кусков текста, исходников и т.п. без необходимости использовать ескейп последовательности.
В этом смысле он похож на конструкцию <nobr><code>&lt;![CDATA[ ... ]]&gt;</code></nobr>, используемую в 
<a href="http://ru.wikipedia.org/wiki/SGML" target="_blank">SGML</a>.
<p>
При использовании простого heredoc-синтаксиса, он не учитывает первые пробельные символы и перевод строки.
Кроме этого не учитывается последний перевод строки перед маркером, если он начинается со старта строки.

<h3>Пример с простым heredoc-синтаксисом</h3>

<div class="row">
  <div class="col-md-10 badge-src">
	<%@controller.widget('BadgeSourceWidget', {view="examples/tutorial.string.rawheredoc.osh"})%>

<pre class="prettyprint linenums lang-js"><% @controller.beginWidget("HtmlEncodeWidget") %>
&lt;%
  echo '<pre>';
  
  // Выведет: this is a string
  // .. - строковый оператор конкатенации
  echo <<<~~'this is a string~~;

  // эта строка начинается и заканчивается символами новой строки
  echo <<<==='

Harry Potter is due to start
his fifth year at Hogwarts School
of Witchcraft and Wizardry.

===;

  echo '</pre>';
%&gt;
<% @controller.endWidget("HtmlEncodeWidget") %></pre>
  </div>
</div>

<h3><a name="heredoc"></a>Heredoc-синтаксис</h3>

<p>
Это последний четверный способ записи строк в OS. Heredoc-синтаксис работает идентично простому heredoc, но в дополнении
позволяет выполнять <a href="var-injection">Обработку переменных внутри строк</a> аналогично тому, как это делается в строках
с двойными кавычками. Heredoc-синтаксис выводит текст как есть без обработки ескейп последовательностей за исключением
<code>\$</code>.
<p>
Heredoc-синтаксис начинается с последовательности <code>&lt;&lt;&lt;MARKER"</code> и заканчивается <code>MARKER</code>, 
где <i>MARKER</i> - это пользовательская последовательность символов. Т.е. в синтаксисе главное отличие от простого heredoc - 
это двойная кавычка вместо одинарной.
<p>
Такой сиснтаксис подходит для вставки в код стороних текстов и исходников, когда необходимо вставить в саму строку какую-то переменную.

<h3><a href="var-injection"></a>Обработка переменных внутри строк</h3>

<p>
Если строка указывается в двойных кавычках, либо при помощи <i>heredoc</i>, то можно вставлять переменные непосредственно
внутрь строки.
<p>
Вставка переменной начинается символами <code>${</code> и заканчивается - <code>}</code>.
Если в строку необходимо вставить сами символы <b>${</b>, то их нужно предварить обратным слешем: <code>\${</code>.

<h3>Пример с вставкой значений</h3>

<div class="row">
  <div class="col-md-10 badge-src">
	<%@controller.widget('BadgeSourceWidget', {view="examples/tutorial.string.injection.osh"})%>
	
<pre class="prettyprint linenums lang-js"><% @controller.beginWidget("HtmlEncodeWidget") %>
&lt;%
  echo "this is a string<br />";

  // Выводит: three plus three is 6
  echo "three plus three is ${3+3}<br />";

  foobar = "blah";
  // Выводит: the value of foobar is blah
  echo "the value of foobar is ${foobar}<br />";

  // Выводит: the value of foobar in ${foobar}
  echo "the value of foobar in \${foobar}<br />";

  function factorial(a){
    return a <= 1 ? 1 : a*factorial(a-1)
  }
  var p = 10;
  // Выводит: factorial of 10 is 3628800
  echo "factorial of ${p} is ${factorial(p)}<br />";
%&gt;
<% @controller.endWidget("HtmlEncodeWidget") %></pre>
  </div>
</div>

<p>
<div class="bs-callout bs-callout-danger">
Обратите внимание, что в примере происходит вставка не только переменых, а и результата выполнения функции <code>factorial</code>.
</div>
</p>

<h3>Преобразование в строку</h3>

<p>
Простые типы автоматически преобразуются в строки, например, при конкатенации по следующим правилам.

<p>
<table class="table table-striped table-bordered">
  <thead>
	<tr>
	  <th>Значение</th>
	  <th>Результат</th>
	  <th>Комментарий</th>
	</tr>
  </thead>
  <tbody>
	<tr>
	  <td><code>null</code></td>
	  <td><span class="str">"null"</span></td>
	  <td></td>
	</tr>
	<tr>
	  <td><code>true</code></td>
	  <td><span class="str">"true"</span></td>
	  <td></td>
	</tr>
	<tr>
	  <td><code>false</code></td>
	  <td><span class="str">"false"</span></td>
	  <td></td>
	</tr>
	<tr>
	  <td><code>0.3</code></td>
	  <td><span class="str">"0.3"</span></td>
	  <td>числа преобразуются в строки по дружелюбному для человека формату - %n (см. <a href="">printf</a>)</td>
	</tr>
  </tbody>
</table>

<p>
Для остальных типов происходит вызов метода <code>valueOf</code>, который должен вернуть один из простых типов.

<p>
OS также имеет функции <code>stringOf</code> (для проверки на возможность быстрого преобразования в строку) 
и <code>toString</code> (для принудительного преобразования в строку, при необходимости, будет вызван метод <code>valueOf</code>).

<h3>Пример</h3>
<div class="row">
  <div class="col-md-10 badge-src">
	<%@controller.widget('BadgeSourceWidget', {view="examples/tutorial.string.convert.osh"})%>
	
<pre class="prettyprint linenums lang-js"><% @controller.beginWidget("HtmlEncodeWidget") %>
&lt;%
  echo "<pre>"
  printf("        %9s %9s\n", 'stringOf', 'toString')
  printf("---------------------------\n")
  printf("  null: %9s %9s\n", stringOf(null), toString(null))
  printf("  true: %9s %9s\n", stringOf(true), toString(true))
  printf(" false: %9s %9s\n", stringOf(false), toString(false))
  printf("  \"12\": %9s %9s\n", stringOf("12"), toString("12"))
  printf("\"0x12\": %9s %9s\n", stringOf("0x12"), toString("0x12"))
  printf("\"0123\": %9s %9s\n", stringOf("0123"), toString("0123"))
  printf("\"0b10\": %9s %9s\n", stringOf("0b10"), toString("0b10"))
  printf("    12: %9s %9s\n", stringOf(12), toString(12))

  var obj = {
    valueOf = function(){
      return 10
    }
  }
  printf("   obj: %9s %9s\n", stringOf(obj), toString(obj))

  var arr = [1,2,3]
  printf(" array: %9s %9s\n", stringOf(arr), toString(arr))
  echo "</pre>"
%&gt;
<% @controller.endWidget("HtmlEncodeWidget") %></pre>
  </div>
</div>

<p>
<div class="row">
  <div class="col-md-10">
<table class="table table-striped table-bordered">
  <thead>
	<tr>
	  <th></th>
	  <th>stringOf</th>
	  <th>toString</th>
	</tr>
  </thead>
  <tbody>
	<tr>
	  <td><code>null</code></td>
	  <td><code>null</code></td>
	  <td><span class="str">"null"</span></td>
	</tr>
	<tr>
	  <td><code>true</code></td>
	  <td><span class="str">"true"</span></td>
	  <td><span class="str">"true"</span></td>
	</tr>
	<tr>
	  <td><code>false</code></td>
	  <td><span class="str">"false"</span></td>
	  <td><span class="str">"false"</span></td>
	</tr>
	<tr>
	  <td><span class="str">"12"</span></td>
	  <td><span class="str">"12"</span></td>
	  <td><span class="str">"12"</span></td>
	</tr>
	<tr>
	  <td><span class="str">"0x12"</span></td>
	  <td><span class="str">"0x12"</span></td>
	  <td><span class="str">"0x12"</span></td>
	</tr>
	<tr>
	  <td><span class="str">"0123"</span></td>
	  <td><span class="str">"0123"</span></td>
	  <td><span class="str">"0123"</span></td>
	</tr>
	<tr>
	  <td><span class="str">"0b10"</span></td>
	  <td><span class="str">"0b10"</span></td>
	  <td><span class="str">"0b10"</span></td>
	</tr>
	<tr>
	  <td><code>12</code></td>
	  <td><span class="str">"12"</span></td>
	  <td><span class="str">"12"</span></td>
	</tr>
	<tr>
	  <td><code>obj</code></td>
	  <td><code>null</code></td>
	  <td><span class="str">"10"</span></td>
	</tr>
	<tr>
	  <td><code>array</code></td>
	  <td><code>null</code></td>
	  <td><span class="str">"[1,2,3]"</span></td>
	</tr>
  </tbody>
</table>
  </div>
</div>
