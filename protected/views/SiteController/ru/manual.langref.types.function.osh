<p>
Функции в OS представляет собой самостоятельный фрагмент кода программы, предназначенный для выполнения некоторой задачи. 
Функции позволяют один и тот же фрагмент программы использовать многократно. Использование функций придает программе модульную структуру, 
облегчает чтение кода и внесение в него исправлений. В общем случае функция выполняет действия и возвращает вычисленное значение в 
вызвавшую ее функцию. Функция получает данные при вызове через свои аргументы. Функция может возвращать вычисленное значение, 
при этом возвращаемое значение подставляется на место вызова функции, где бы этот вызов ни находился. В качестве частного случая 
функция может не иметь аргументов и не возвращать значения.

<p>
В OS все функции ялвяются функциями первого класса (<a href="http://en.wikipedia.org/wiki/First-class_function" target="_blank">first-class 
function</a>). Это означает, что OS поддерживает передачу функций в качестве аргументов другим функциям, возврат их как результат 
других функций, присваивание их переменным или сохранение в структурах данных. Кроме этого OS поддерживает анонимные функций. В общем-то
все функции в OS анонимные, а имя функции придает переменная, в которую функция сохранена.

<div class="row">
  <div class="col-md-11 badge-src">
	<%@controller.widget('BadgeSourceWidget', {view="examples/tutorial.functions.osh"})%>
<pre class="prettyprint linenums lang-js"><% @controller.beginWidget("HtmlEncodeWidget") %>
<pre>&lt;%
  function max(a, b){
    return a > b ? a : b;
  }
  print(max(10, 7))
%&gt;</pre>
<% @controller.endWidget("HtmlEncodeWidget") %></pre>
  </div>
</div>

<h3>Несколько возвращаемых значений</h3>
<p>
Не совсем традиционным, но удобным свойством функций в OS является то, что они могут возвращать несколько значений.

<div class="row">
  <div class="col-md-11 badge-src">
	<%@controller.widget('BadgeSourceWidget', {view="examples/tutorial.functions.return-values.osh"})%>
<pre class="prettyprint linenums lang-js"><% @controller.beginWidget("HtmlEncodeWidget") %>
<pre>&lt;%
  var func = function(){ return 1, 2 }
  var x, y = func()
  print "x: ${x}, y: ${y}"
%&gt;</pre>
<% @controller.endWidget("HtmlEncodeWidget") %></pre>
  </div>
</div>

<h3>Функции - объекты</h3>
<p>
Все функции в OS являются объектами. Это означает, что у них есть свойства и методы, которые можно использовать.

<div class="row">
  <div class="col-md-11 badge-src">
	<%@controller.widget('BadgeSourceWidget', {view="examples/tutorial.functions.apply.osh"})%>
<pre class="prettyprint linenums lang-js"><% @controller.beginWidget("HtmlEncodeWidget") %>
<pre>&lt;%
  var func = function(){ print arguments }
  var func2 = function(f){ f.apply(null, ...) }
  func2(func, 1, 2, 3)
%&gt;</pre>
<% @controller.endWidget("HtmlEncodeWidget") %></pre>
  </div>
</div>

<p>
<div class="bs-callout bs-callout-danger">
Оператор <code>...</code> возвращает массив дополнительных аргументов функции, с которыми она была запущена.
</div>
</p>

<p>
<div class="bs-callout bs-callout-danger">
Оператор <code>arguments</code> возвращает массив всех аргументов функции, с которыми она была запущена. 
</div>
</p>

<p>
<div class="bs-callout bs-callout-danger">
<p>
Метод <code>apply</code> вызывает функцию в контексте любого объекта (первый аргумент в apply) со списком 
параметров (второй аргумент в apply, может быть массив или объект, в случае объекта передаются только 
именованные параметры). 

<h3>Пример из класса Controller</h3>
<div class="row">
  <div class="col-md-11 badge-src">
	<%@controller.widget('BadgeSourceWidget', {source="https://github.com/unitpoint/objectscript.org/blob/master/protected/components/Controller.os#L25"})%>
<pre class="prettyprint linenums lang-js">
  runAction = function(name){
    var old;
    old, @actionId = @actionId, name || @owner.defaultAction;
    this["action${@actionId.flower()}"].apply(this, {}.merge(_GET, _POST));
    @actionId = old;
  },
</pre>
  </div>
</div>

</div>
</p>

<h3>Вложенные функции и замыкания</h3>

<p>
Замыкание - одна из мощнейших возможностей OS. Если говорить просто, то замыкание - это внутренняя функция. 
Ведь OS разрешает создавать функции по ходу выполнения скрипта. И эти функции имеют доступ к переменным внешних функций - это
и есть замыкание.

<div class="row">
  <div class="col-md-11 badge-src">
	<%@controller.widget('BadgeSourceWidget', {view="examples/tutorial.functions.closure.osh"})%>
<pre class="prettyprint linenums lang-js">
  function start(a){
    return function(){
      return a++;
    }
  }
  func = start(10)
  print(func())    // выведет: 10
  print(func())    // выведет: 11
  print(func())    // выведет: 12
  print(func())    // выведет: 13
</pre>
  </div>
</div>

<p>
В данном примере функция <code>start</code> возвращает др. анонимную функцию, которая присваивается в переменную <code>func</code>, 
при этом <i>func</i> имеет доступ к локальной переменной <code>a</code> функции <i>start</i>, которая уже завершила свое выполнение.


